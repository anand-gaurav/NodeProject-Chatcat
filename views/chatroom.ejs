<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8">
	<title>ChatCat -
		<%= room %>
	</title>
	<link rel="stylesheet" href="/css/chatroomStyles.css">
	<script src="/js/jquery-2.1.4.min.js"></script>
	<script src="/socket.io/socket.io.js"></script>
	<script>
		'use strict';
		$(() => {
			//below ejs properties values are set in route module while rendering chatroom page
			let socket = io('<%= host %>' + '/chatter');
			let roomID = '<%= roomID %>';
			let user = '<%= user.fullName %>';
			let userPic = '<%= user.profilePic %>';
			let chatUsers = $('.chatUsers');
			let chatInput = $("input[name='userInput']");
			let chatMessagesDiv = $(".chatMessages");

			//below code will get executed once the client gets connected to server on a particular socket namespace 'chatter'
			// After client & server socket connection is established, from the client side, we emits 'join' event along with user data
			//who wishes to join a particular chatroom 
			socket.on('connect', () => {
				socket.emit('join', {
					//object literal shorthand notation of ES6
					roomID,
					user,
					userPic
				})
			});

			let userList = user => {
				return `<div class="userBlock">
					<div class="userPic">
						<img src="${user.userPic}" alt="${user.user}">
					</div>
					<div class="cuserName">${user.user}</div>
				</div>`;
			}

			socket.on('updateUserList', data => {
				let parsedData = JSON.parse(data);
				let userListData = '';
				for (let user of parsedData){
					userListData += userList(user);
				}
				chatUsers.html('').html(userListData);
			});

			let updateFeed = (userPic, message) => {
				let template = `<div class="chatBlock">
									<div class="userPic">
										<img src="${userPic}">
									</div>
									<div class="chatMsg">
										${message}
									</div>
								</div>`;
				$(template).hide().appendTo(chatMessagesDiv).slideDown(200);
			}

			//if user press Enter key, send the msg to socket
			// We are not using fat arrow function as the call back.
			// In this callback, we need access to 'this' keyword. It offers a way to access the context within 
			// which the event was fired. Arrow function do not create a new 'this' context unlike regular function
			chatInput.on('keyup', function(evt){
				evt.preventDefault();
				let msgFld = $(this);
				if(evt.which === 13 && msgFld !== ''){
					socket.emit('newMessage', {
						roomID,
						user,
						userPic,
						message: msgFld.val()
					});
					//Update the local feed
					updateFeed(userPic, msgFld.val());
					msgFld.val('');
				}
			});

			socket.on('inMessage', data => {
				let parsedData = JSON.parse(data);
				updateFeed(parsedData.userPic, parsedData.message);
			});

		});
	</script>
</head>

<body>
	<div class="container">
		<div class="titlePanel">
			<h1>ChatCAT |
				<%= room %>
			</h1>
		</div>
		<div class="controls">
			<div class="userPicHolder">
				<img src="<%= user.profilePic %>" alt="<%= user.fullName %>">
			</div>
			<p class="userName">
				<%= user.fullName %>
			</p>
			<a href="/rooms" id="roomsBtn">Rooms</a>
			<a href="/logout" id="logOutBtn">Logout</a>
		</div>
		<div class="chatListDiv">
			<div class="chatMessagesPanel">
				<div class="chatMessages">
					<!-- Loop this for chat messages -->
					<div class="chatBlock">
						<div class="userPic">
							<img src="/img/user.jpg">
						</div>
						<div class="chatMsg">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Deleniti perferendis eius aut nesciunt necessitatibus ad
							nulla, qui sequi, id nam. Possimus odit aut nisi veritatis amet distinctio id officiis ipsam!</div>
					</div>
					<!-- loop end -->
				</div>
				<div class="typePanel">
					<input type="text" name="userInput" placeholder="Type here and press enter">
					<a href="#" id="uploadFile" class="fileUploadBtn">Photo</a>
				</div>
			</div>
			<div class="chatUsers">
				<!-- Loop this for chat users -->
				<div class="userBlock">
					<div class="userPic">
						<img src="/img/user.jpg" alt="John Doe">
					</div>
					<div class="cuserName">John Doe</div>
				</div>
				<!-- loop end -->
			</div>
		</div>
	</div>
</body>

</html>